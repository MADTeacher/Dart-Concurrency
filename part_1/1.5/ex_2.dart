import 'dart:async';

/// –ò—Å–∫–ª—é—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ–º –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞—á–∏
class TaskCancelledException implements Exception {
  final String message;
  const TaskCancelledException([this.message = '–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞']);
  
  @override
  String toString() => message;
}

/// –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è 
/// —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–∞
/// [T] - —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–∞–¥–∞—á–µ–π
class CancellableDelayedTask<T> {
  final Duration delay; // –≤—Ä–µ–º—è –¥–æ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏
  // —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ c –∑–∞–¥–µ—Ä–∂–∫–æ–π
  final FutureOr<T> Function() _task;
  final _completer = Completer<T>();
  Timer? _timer;

  CancellableDelayedTask(this.delay, this._task);

  /// Future, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, 
  /// –∫–æ–≥–¥–∞ –∑–∞–¥–∞—á–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞
  Future<T> get future => _completer.future;

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
  bool get isCancelled => _completer.isCompleted;

  /// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
  void run() {
    if (isCancelled) return;

    _timer = Timer(delay, () async {
      if (isCancelled) return;
      try {
        final result = await _task(); // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É

        // –ó–∞–≤–µ—Ä—à–∞–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω—ã
        if (!isCancelled) {
          _completer.complete(result);
        }
      } catch (e, s) { // –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        // –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω—ã - –∑–∞–≤–µ—Ä—à–∞–µ–º —Å –æ—à–∏–±–∫–æ–π
        if (!isCancelled) {
          _completer.completeError(e, s);
        }
      }
    });
  }

  /// –û—Ç–º–µ–Ω—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
  void cancel([String? message]) { // message - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    _timer?.cancel();
    if (!isCancelled) {
      _completer.completeError(
        TaskCancelledException(
          message ?? '–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
        ),
      );
    }
  }
}

Future<void> main() async {
  // –ó–∞–¥–∞—á–∞: —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É
  final delayedTask = CancellableDelayedTask<String>(
    const Duration(seconds: 5),
    () => '–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω –ø–æ—Å–ª–µ 5 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è.',
  );

  delayedTask.run();

  // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
  Future.delayed(const Duration(seconds: 2), () {
    print('üõë –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É...');
    delayedTask.cancel();
  });

  try {
    final result = await delayedTask.future;
    print('‚úÖ $result');
  } on TaskCancelledException catch (e) {
    print('‚ùå $e');
  }
}
