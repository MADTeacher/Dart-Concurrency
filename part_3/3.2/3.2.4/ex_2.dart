import 'dart:async';

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö 
// –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö callback-—Ñ—É–Ω–∫—Ü–∏–π
class CallbackInterceptor {
  final Set<Function> _userCallbacks = {};
  int _callbackCounter = 0;

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π callback –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –æ–±–µ—Ä–Ω—É—Ç—É—é
  // –≤ –ª–æ–≥–∏—Ä—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤–µ—Ä—Å–∏—é
  T registerUserCallback<T extends Function>(T callback, String type) {
    _callbackCounter++;
    print('‚úÖ –ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω user callback #$_callbackCounter: $type');

    // –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è callback
    dynamic wrappedCallback;
    // –µ—Å–ª–∏ callback-—Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (callback is void Function()) {
      wrappedCallback = () {
        print('üéØ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π $type');
        callback();
      };
    } else {
      throw ArgumentError('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø callback-—Ñ—É–Ω–∫—Ü–∏–∏');
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±–µ—Ä–Ω—É—Ç—ã–π callback –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π
    _userCallbacks.add(wrappedCallback);

    return wrappedCallback as T;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ callback –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º
  bool isUserCallback(Function callback) {
    return _userCallbacks.contains(callback);
  }

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
  // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö callback-—Ñ—É–Ω–∫—Ü–∏–π
  int get userCallbackCount => _callbackCounter;
}

void main() {
  final interceptor = CallbackInterceptor();

  // –°–æ–∑–¥–∞–µ–º ZoneSpecification —Å –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–º –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ callback-—Ñ—É–Ω–∫—Ü–∏–π
  final zoneSpec = ZoneSpecification(
    // –î–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö
    // callback-—Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, () => void)
    registerCallback:
        <R>(Zone self, ZoneDelegate parent, Zone zone, R Function() f) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º–∞—è
          // –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è callback-—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π
          if (interceptor.isUserCallback(f)) {
            print('üîç –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω user callback');
          }

          // –í—Å–µ –∫–æ–ª–±—ç–∫–∏ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
          return parent.registerCallback(zone, f);
        },
  );

  runZoned(() async {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π callback
    final timerCallback = interceptor.registerUserCallback(() {
      print('‚è∞ Timer —Å—Ä–∞–±–æ—Ç–∞–ª!');
    }, 'Timer');
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–∏ÃÜ–º–µ—Ä c –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π callback-—Ñ—É–Ω–∫—Ü–∏–µ–π
    Timer(Duration(milliseconds: 10), timerCallback);

    final microtaskCallback = interceptor.registerUserCallback(() {
      print('‚ö° Microtask –≤—ã–ø–æ–ª–Ω–µ–Ω!');
    }, 'Microtask');
    scheduleMicrotask(microtaskCallback);

    final futureCallback = interceptor.registerUserCallback(() {
      print('‚è∞ Future –≤—ã–ø–æ–ª–Ω–µ–Ω!');
    }, 'Future.delayed');
    Future.delayed(Duration(milliseconds: 15), futureCallback);

    print('');
    print(
      '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ ${interceptor.userCallbackCount}'
      ' callback-—Ñ—É–Ω–∫—Ü–∏–π',
    );
  }, zoneSpecification: zoneSpec);
}
