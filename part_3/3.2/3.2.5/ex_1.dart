import 'dart:async';

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö
// –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö callback-—Ñ—É–Ω–∫—Ü–∏–π
class CallbackInterceptor {
  final Set<Function> _userCallbacks = {};
  int _callbackCounter = 0;

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π callback –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –æ–±–µ—Ä–Ω—É—Ç—É—é
  // –≤ –ª–æ–≥–∏—Ä—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤–µ—Ä—Å–∏—é
  T registerUnaryUserCallback<T extends Function>(T callback, String type) {
    _callbackCounter++;
    print('‚úÖ –ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω user callback #$_callbackCounter: $type');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ–±–µ—Ä—Ç–∫—É
    T wrappedCallback;
    
    if (callback is void Function(dynamic)) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ void —Ñ—É–Ω–∫—Ü–∏–π —Å –æ–¥–Ω–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
      wrappedCallback = ((dynamic arg) {
        print('üéØ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è $type —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º: $arg');
        callback(arg);
      }) as T;
    } else if (callback is dynamic Function(dynamic)) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π —Å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
      wrappedCallback = ((dynamic arg) {
        print('üéØ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è $type —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º: $arg');
        return callback(arg);
      }) as T;
    } else {
      throw ArgumentError('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø callback-—Ñ—É–Ω–∫—Ü–∏–∏');
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±–µ—Ä–Ω—É—Ç—ã–π callback –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π
    _userCallbacks.add(wrappedCallback);

    return wrappedCallback;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ callback –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º
  bool isUserCallback(Function callback) {
    return _userCallbacks.contains(callback);
  }

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
  // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö callback-—Ñ—É–Ω–∫—Ü–∏–π
  int get userCallbackCount => _callbackCounter;
}

void main() {
  final interceptor = CallbackInterceptor();

  // –°–æ–∑–¥–∞–µ–º ZoneSpecification —Å –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–º –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ callback-—Ñ—É–Ω–∫—Ü–∏–π
  final zoneSpec = ZoneSpecification(
    // –î–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö
    // callback-—Ñ—É–Ω–∫—Ü–∏–π —Å –æ–¥–Ω–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
    runUnary:
        <R, T>(
          Zone self,
          ZoneDelegate parent,
          Zone zone,
          R Function(T) f,
          T arg,
        ) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π
          // –∏ –µ—Å–ª–∏ –¥–∞, —Ç–æ –∑–∞–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
          if (interceptor.isUserCallback(f)) {
            print('\nüîç –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω user callback $f');
            final stopwatch = Stopwatch()..start();
            final result = parent.runUnary(zone, f, arg);
            stopwatch.stop();
            print('‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${stopwatch.elapsed}\n');
            return result;
          }
          // –û—Å—Ç–∞–ª—å–Ω—ã–µ callback-—Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
          return parent.runUnary(zone, f, arg);
        },
  );

  runZoned(() async {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π callback
    final futureCallback = interceptor.registerUnaryUserCallback((data) {
      print('‚è∞ Future –≤—ã–ø–æ–ª–Ω–µ–Ω c –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º: $data');
    }, 'Future.then');
    // –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é callback-—Ñ—É–Ω–∫—Ü–∏—é –≤ Future.then
    Future.value('^_^').then(futureCallback);

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π callback –¥–ª—è Stream
    final streamCallback = interceptor.registerUnaryUserCallback((data) {
      print('‚è∞ –í stream –ø–æ—Å—Ç—É–ø–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ: $data');
    }, 'Stream.listen(onData)');

    final controller = StreamController<int>();
    // –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é callback-—Ñ—É–Ω–∫—Ü–∏—é –≤ Stream.listen
    controller.stream.listen(streamCallback);

    controller.add(36);
    controller.add(90);
    await controller.close();

    print('');
    print(
      '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ ${interceptor.userCallbackCount}'
      ' callback-—Ñ—É–Ω–∫—Ü–∏–π',
    );
  }, zoneSpecification: zoneSpec);
}
