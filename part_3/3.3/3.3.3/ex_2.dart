import 'dart:async';
import 'dart:io';

// –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
enum LogLevel { debug, info, warning, error }

class SimpleLogger {
  final LogLevel minLevel;
  // –§–ª–∞–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ü–≤–µ—Ç–Ω—ã—Ö –ª–æ–≥–æ–≤
  final bool enableColors;
  // –°–ø–∏—Å–æ–∫ –ª–æ–≥–æ–≤
  final List<String> _logs = [];

  // –ù–∞–∑–Ω–∞—á–∞–µ–º ANSI-—Ü–≤–µ—Ç–∞ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  static const Map<LogLevel, String> _colors = {
    LogLevel.debug: '\x1B[36m',
    LogLevel.info: '\x1B[32m',
    LogLevel.warning: '\x1B[33m',
    LogLevel.error: '\x1B[31m',
  };
  // –°–±—Ä–æ—Å —Ü–≤–µ—Ç–æ–≤
  static const String _reset = '\x1B[0m';

  SimpleLogger({this.minLevel = LogLevel.info, this.enableColors = true});

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  void log(LogLevel level, String message) {
    if (level.index < minLevel.index) return;

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞, –¥–æ–±–∞–≤–ª—è—è –≤—Ä–µ–º—è –∏ —É—Ä–æ–≤–µ–Ω—å
    final timestamp = DateTime.now().toIso8601String().substring(11, 23);
    final levelName = level.name.toUpperCase().padRight(7);
    final logEntry = '[$timestamp] [$levelName] $message';

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ —Å–ø–∏—Å–æ–∫
    _logs.add(logEntry);

    if (enableColors) {
      final color = _colors[level] ?? '';
      // –°–Ω–∞—á–∞–ª–∞ –æ–∫—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ü–≤–µ—Ç
      // –¥–∞–ª–µ–µ –∏–¥–µ—Ç —Å–∞–º–æ –ª–æ–≥–∏—Ä—É–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
      // –ø–æ—Å–ª–µ —á–µ–≥–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ü–≤–µ—Ç
      final output = '$color$logEntry$_reset';

      // –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–∫–∏, –≤—ã–≤–æ–¥–∏–º –≤ –µ–µ –≤ stderr
      if (level == LogLevel.error) {
        stderr.writeln(output);
      } else {
        stdout.writeln(output);
      }
    } else {
      if (level == LogLevel.error) {
        stderr.writeln(logEntry);
      } else {
        stdout.writeln(logEntry);
      }
    }
  }

  // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  void debug(String message) => log(LogLevel.debug, message);
  void info(String message) => log(LogLevel.info, message);
  void warning(String message) => log(LogLevel.warning, message);
  void error(String message) => log(LogLevel.error, message);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–æ–≥–æ–≤
  List<String> get logs => List.unmodifiable(_logs);

  // –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ª–æ–≥–æ–≤
  void clear() => _logs.clear();

  // –°–æ–∑–¥–∞–µ–º Zone specification –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ print
  ZoneSpecification createZoneSpec() {
    return ZoneSpecification(
      print: (Zone self, ZoneDelegate parent, Zone zone, String line) {
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–∑–æ–≤ print
        // –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ info
        info('PRINT: $line');
      },
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –º–æ–¥–µ–ª–∏—Ä—É—é—â–∞—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
// —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
Future<T> runWithLogging<T>(
  SimpleLogger logger,
  Future<T> Function() operation,
) async {
  return runZoned(() async {
    logger.info('–ù–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º');

    try {
      final result = await operation();
      logger.info('–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      return result;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: $error');
      rethrow;
    }
  }, zoneSpecification: logger.createZoneSpec());
}

void main() async {
  final logger = SimpleLogger(minLevel: LogLevel.debug);

  print('\n‚ùå –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π ‚ùå\n');

  try {
    await runWithLogging(logger, () async {
      logger.info('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –æ—à–∏–±–∫–æ–π');
      await Future.delayed(Duration(milliseconds: 50));
      throw Exception('–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞');
    });
  } catch (e) {
    // –û—à–∏–±–∫–∞ —É–∂–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞
  }

  print('\n‚úÖ –®—Ç–∞—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚úÖ\n');
  await runWithLogging(logger, () async {
    logger.debug('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏');
    logger.info('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');

    await Future.delayed(Duration(milliseconds: 100));

    logger.info('–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    logger.warning('–í–µ—Ä—Å–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ API —É—Å—Ç–∞—Ä–µ–ª–∞!!!');

    await Future.delayed(Duration(milliseconds: 50));

    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ print –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ
    print('–í–∑—ã–≤–∞–µ–º –∫ print()');

    logger.info('–ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
  });

  print('\nüìä –°–≤–æ–¥–∫–∞ –ª–æ–≥–æ–≤:');
  print('–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${logger.logs.length}');

  final errorCount = logger.logs.where((log) => log.contains('[ERROR')).length;
  final warningCount = logger.logs
      .where((log) => log.contains('[WARNING'))
      .length;

  print('–û—à–∏–±–æ–∫: $errorCount, –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: $warningCount');
}
