import 'dart:async';

// –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class Student {
  final String id;
  final String name;
  final String group;

  Student(this.id, this.name, this.group);

  @override
  String toString() => '$name ($group)';
}

class Grade {
  final String id;
  final String studentId;
  final String subject;
  final int score;
  final DateTime timestamp;
  final String professorId;

  Grade(
    this.id,
    this.studentId,
    this.subject,
    this.score,
    this.timestamp,
    this.professorId,
  );

  @override
  String toString() => '$subject: $score –±–∞–ª–ª–æ–≤ (–≤—ã—Å—Ç–∞–≤–∏–ª: $professorId)';
}

// –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫
class GradingContext {
  final String professor; // –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
  final String subject; // –ü—Ä–µ–¥–º–µ—Ç
  final String action; // –î–µ–∏ÃÜ—Å—Ç–≤–∏–µ
  bool shouldRollback = false; // –§–ª–∞–≥ –æ—Ç–∫–∞—Ç–∞
  // —Å–ø–∏—Å–æ–∫ —Å ID –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫
  final List<String> _assignedGradeIds = [];

  GradingContext(this.professor, this.subject, this.action);

  // –ü–æ–º–µ—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∫–∞—Ç–∞
  void markForRollback() {
    shouldRollback = true;
    print('‚ö†Ô∏è  –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–º–µ—á–µ–Ω –¥–ª—è –æ—Ç–∫–∞—Ç–∞');
  }

  // –î–æ–±–∞–≤–ª—è–µ—Ç ID –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
  void addAssignedGrade(String gradeId) {
    _assignedGradeIds.add(gradeId);
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º—ã–π —Å–ø–∏—Å–æ–∫ ID –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫
  List<String> get assignedGradeIds => List.unmodifiable(_assignedGradeIds);

  @override
  String toString() =>
      'GradingContext(professor: $professor, subject:'
      ' $subject, rollback: $shouldRollback)';
}

// –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫
const Symbol gradingContextKey = #gradingContext;

// –°–µ—Ä–≤–∏—Å —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
class TransactionalGradingService {
  // –°–ø–∏—Å–æ–∫ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫
  final List<Grade> _grades = [];
  int _gradeIdCounter = 1;

  Future<String> assignGrade(Student student, int score) async {
    final context = Zone.current[gradingContextKey] as GradingContext;

    print('üìù ${context.action}:');
    print('   –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ${context.professor}');
    print('   –ü—Ä–µ–¥–º–µ—Ç: ${context.subject}');
    print('   –°—Ç—É–¥–µ–Ω—Ç: $student');
    print('   –û—Ü–µ–Ω–∫–∞: $score –±–∞–ª–ª–æ–≤');

    final gradeId = 'G${_gradeIdCounter++}';
    final grade = Grade(
      gradeId,
      student.id,
      context.subject,
      score,
      DateTime.now(),
      context.professor,
    );

    _grades.add(grade);
    context.addAssignedGrade(gradeId); // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    print('‚úÖ –û—Ü–µ–Ω–∫–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ (ID: $gradeId)\n');
    return gradeId;
  }

  void rollbackGrades(List<String> gradeIds) {
    print('üîÑ –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫–∏: ${gradeIds.join(', ')}');
    _grades.removeWhere((grade) => gradeIds.contains(grade.id));
    print('‚úÖ –û—Ç–∫–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
  }

  List<Grade> getAllGrades() => List.unmodifiable(_grades);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫
Future<T> runGradingTransaction<T>(
  GradingContext context, // –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  Future<T> Function() operation, // –í—ã–ø–æ–ª–Ω—è–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
  TransactionalGradingService service, // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
) async {
  print('–ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: ${context.action}\n');

  try {
    // –∑–∞–ø—É—Å–∫–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–π –¥–æ—á–µ—Ä–Ω–µ–π –∑–æ–Ω–µ
    final result = await runZoned(
      operation,
      zoneValues: {gradingContextKey: context},
    );

    // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–æ–Ω—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Ç–∫–∞—Ç–∞
    if (context.shouldRollback) {
      print('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–º–µ—á–µ–Ω–∞ –¥–ª—è –æ—Ç–∫–∞—Ç–∞');
      service.rollbackGrades(context.assignedGradeIds);
    } else {
      print('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }

    return result;
  } catch (e) {
    print('üí• –û—à–∏–±–∫–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: $e');
    print('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–∫–∞—Ç...');
    service.rollbackGrades(context.assignedGradeIds);
    rethrow;
  }
}

void main() async {
  final service = TransactionalGradingService();
  final student1 = Student('001', '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞', '4313');
  final student2 = Student('002', '–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤', '4313');

  // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å –æ—Ç–∫–∞—Ç–æ–º –ø–æ —É—Å–ª–æ–≤–∏—é
  await runGradingTransaction(
    GradingContext(
      '–¥–æ—Ü. –ß–µ—Ä–Ω—ã—à–µ–≤ –°.–ê.',
      '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞',
      '–≠–∫–∑–∞–º–µ–Ω –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ',
    ),
    () async {
      final context = Zone.current[gradingContextKey] as GradingContext;

      await service.assignGrade(student1, 78);
      await service.assignGrade(student2, 45); // –ù–∏–∑–∫–∞—è –æ—Ü–µ–Ω–∫–∞

      // –£—Å–ª–æ–≤–∏–µ –¥–ª—è –æ—Ç–∫–∞—Ç–∞: –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ü–µ–Ω–∫–∏ –Ω–∏–∂–µ 55
      if (service.getAllGrades().any((g) => g.score < 55)) {
        context.markForRollback();
        print('üìã –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∞ –Ω–∏–∂–µ 55 –±–∞–ª–ª–æ–≤ - –ø–æ–º–µ—á–∞–µ–º –¥–ª—è –æ—Ç–∫–∞—Ç–∞');
      }
    },
    service,
  );

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  print('–ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ü–µ–Ω–æ–∫:');
  final grades = service.getAllGrades();
  if (grades.isEmpty) {
    print('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫');
  } else {
    for (final grade in grades) {
      print('${grade.id}: $grade');
    }
  }
}
