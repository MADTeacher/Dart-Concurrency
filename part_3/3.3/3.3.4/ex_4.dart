import 'dart:async';

class ZoneProfiler {
  // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  final Map<String, List<Duration>> _metrics = {};
  int _timerCount = 0; // —Å—á–µ—Ç—á–∏–∫ —Ç–∞–∏ÃÜ–º–µ—Ä–æ–≤
  int _microtaskCount = 0; // —Å—á–µ—Ç—á–∏–∫ –º–∏–∫—Ä–æ–∑–∞–¥–∞—á

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–π
  // —Å–æ–∑–¥–∞–µ—Ç –∑–æ–Ω—É —Å –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–º —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  Future<T> profile<T>(String name, Future<T> Function() callback) async {
    // –°—Ç–∞—Ä—Ç—É–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    final stopwatch = Stopwatch()..start();

    // –°—Ç–∞—Ä—Ç—É–µ–º –∑–æ–Ω—É –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    return await runZoned<Future<T>>(
      () async {
        try {
          // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
          print('üöÄ –ù–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏: $name');
          final result = await callback();

          stopwatch.stop(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–∞–±–ª–∏—Ü—É
          _recordMetric(name, stopwatch.elapsed);
          // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
          _logMetric(name, stopwatch.elapsed, success: true);

          return result; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        } catch (error) {
          // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
          stopwatch.stop();
          _recordMetric(name, stopwatch.elapsed);
          _logMetric(name, stopwatch.elapsed, success: false, error: error);
          rethrow; // –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
        }
      },
      // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–∏
      zoneSpecification: _getZoneSpecification(),
    );
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–æ–Ω—ã –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  ZoneSpecification _getZoneSpecification() {
    return ZoneSpecification(
      // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–≤
      createTimer:
          (
            Zone self,
            ZoneDelegate parent,
            Zone zone,
            Duration duration,
            void Function() callback,
          ) {
            _timerCount++;
            print(
              '  ‚è∞ –°–æ–∑–¥–∞–Ω —Ç–∞–π–º–µ—Ä #$_timerCount: ${duration.inMilliseconds}ms',
            );
            return parent.createTimer(zone, duration, callback);
          },
      // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö —Ç–∞–π–º–µ—Ä–æ–≤
      createPeriodicTimer:
          (
            Zone self,
            ZoneDelegate parent,
            Zone zone,
            Duration period,
            void Function(Timer) callback,
          ) {
            print(
              '  üîÑ –°–æ–∑–¥–∞–Ω –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Ç–∞–π–º–µ—Ä: ${period.inMilliseconds}ms',
            );
            return parent.createPeriodicTimer(zone, period, callback);
          },
      // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ–∑–∞–¥–∞—á
      scheduleMicrotask:
          (
            Zone self,
            ZoneDelegate parent,
            Zone zone,
            void Function() callback,
          ) {
            _microtaskCount++;
            print('  ‚ö° –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –º–∏–∫—Ä–æ–∑–∞–¥–∞—á–∞ #$_microtaskCount');
            return parent.scheduleMicrotask(zone, callback);
          },
      // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º print –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      print: (Zone self, ZoneDelegate parent, Zone zone, String line) {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        final timestamp = DateTime.now().toIso8601String().substring(11, 23);
        // –í—ã–≤–æ–¥–∏–º –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
        parent.print(zone, '[$timestamp] ZONE_PRINT: $line');
      },
    );
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É
  void _recordMetric(String name, Duration duration) {
    _metrics.putIfAbsent(name, () => []).add(duration);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
  void _logMetric(
    String name,
    Duration duration, {
    bool success = true,
    Object? error,
  }) {
    final ms = duration.inMicroseconds / 1000;
    final status = success ? '‚úÖ' : '‚ùå';
    final errorInfo = error != null ? ' ($error)' : '';
    print('$status [$name] –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${ms.toStringAsFixed(2)}ms$errorInfo');
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  void printSummary() {
    if (_metrics.isEmpty) {
      print('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      return;
    }

    print('\nüìä –°–≤–æ–¥–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:');
    print('=' * 40);

    for (final entry in _metrics.entries) {
      final name = entry.key;
      final durations = entry.value;
      // –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      final avgMs =
          durations
              .map((d) => d.inMicroseconds / 1000)
              .reduce((a, b) => a + b) /
          durations.length;
      // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      final minMs = durations
          .map((d) => d.inMicroseconds / 1000)
          .reduce((a, b) => a < b ? a : b);
      // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      final maxMs = durations
          .map((d) => d.inMicroseconds / 1000)
          .reduce((a, b) => a > b ? a : b);

      print('üîπ $name:');
      print('   –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π: ${durations.length}');
      print('   –°—Ä–µ–¥–Ω–µ–µ: ${avgMs.toStringAsFixed(2)}ms');
      print(
        '   –ú–∏–Ω/–ú–∞–∫—Å: ${minMs.toStringAsFixed(2)}ms /'
        ' ${maxMs.toStringAsFixed(2)}ms',
      );
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  void clear() => _metrics.clear();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ —Å–µ—Ä–≤–µ—Ä—É
Future<String> simulateApiCall(String endpoint, {int delayMs = 200}) async {
  await Future.delayed(Duration(milliseconds: delayMs));
  if (endpoint == 'error') {
    throw Exception('API Error');
  }
  return 'Response from $endpoint';
}

void main() async {
  final profiler = ZoneProfiler();

  // –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è
  // –æ–ø–µ—Ä–∞—Ü–∏–∏ user_login
  await profiler.profile('user_login', () async {
    print('–ù–∞—á–∏–Ω–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é'); // print –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—Å—è
    await Future.delayed(Duration(milliseconds: 150));
    scheduleMicrotask(() => print('–ú–∏–∫—Ä–æ–∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'));
    return await simulateApiCall('/auth/login', delayMs: 100);
  });

  await profiler.profile('user_login', () async {
    await Future.delayed(Duration(milliseconds: 50));
    return await simulateApiCall('/auth/login', delayMs: 150);
  });

  // –æ–¥–∏–Ω —Ä–∞–∑ –≤—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è
  // –æ–ø–µ—Ä–∞—Ü–∏–∏ load_profile
  await profiler.profile('load_profile', () async {
    print('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ—Ñ–∏–ª—è'); // print –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—Å—è
    await Future.delayed(Duration(milliseconds: 100));
    return await simulateApiCall('/user/profile', delayMs: 100);
  });

  // –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—à–∏–±–æ–∫
  print('\n –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—à–∏–±–æ–∫');
  try {
    await profiler.profile('error_operation', () async {
      print('–ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Å –æ—à–∏–±–∫–æ–π');
      await Future.delayed(Duration(milliseconds: 50));
      return await simulateApiCall('error', delayMs: 25);
    });
    print('–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ (–Ω–µ –¥–æ–ª–∂–Ω–æ –ø–µ—á–∞—Ç–∞—Ç—å—Å—è)');
  } catch (e) {
    // –û—à–∏–±–∫–∞ —É–∂–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤—â–∏–∫–æ–º
  }

  profiler.printSummary();
}
