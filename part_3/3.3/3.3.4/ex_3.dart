import 'dart:async';
import 'dart:io';

class SimpleProfiler {
  // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  final Map<String, List<Duration>> _metrics = {};

  // –ú–µ—Ç–æ–¥ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
  // –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ñ—É–Ω–∫—Ü–∏—é-–æ–ø–µ—Ä–∞—Ü–∏–∏,
  // —á–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω
  Future<T> profile<T>(String name, Future<T> Function() operation) async {
    // –°—Ç–∞—Ä—Ç—É–µ–º —Ç–∞–∏ÃÜ–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    final stopwatch = Stopwatch()..start();

    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
      final result = await operation();
      stopwatch.stop(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–∏ÃÜ–º–µ—Ä

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–∞–±–ª–∏—Ü—É
      _recordMetric(name, stopwatch.elapsed);
      // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
      _logMetric(name, stopwatch.elapsed, success: true);

      return result; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    } catch (error) {
      // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–∏ÃÜ–º–µ—Ä
      stopwatch.stop();

      _recordMetric(name, stopwatch.elapsed);
      _logMetric(name, stopwatch.elapsed, success: false, error: error);

      rethrow; // –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É
  void _recordMetric(String name, Duration duration) {
    _metrics.putIfAbsent(name, () => []).add(duration);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
  void _logMetric(
    String name, // –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    Duration duration, { // –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    bool success = true, // –£—Å–ø–µ—à–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞?
    Object? error, // –î–∞–Ω–Ω—ã–µ –æ–± –æ—à–∏–±–∫–µ
  }) {
    final ms = duration.inMicroseconds / 1000;
    final status = success ? '‚úÖ' : '‚ùå';
    final errorInfo = error != null ? ' (Error: $error)' : '';

    stdout.writeln(
      '$status $name: ${ms.toStringAsFixed(2)}'
      'ms$errorInfo',
    );
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  void printSummary() {
    if (_metrics.isEmpty) {
      print('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      return;
    }

    print('\nüìä –°–≤–æ–¥–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:');
    print('=' * 40);

    for (final entry in _metrics.entries) {
      final name = entry.key;
      final durations = entry.value;
      // –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      final avgMs =
          durations
              .map((d) => d.inMicroseconds / 1000)
              .reduce((a, b) => a + b) /
          durations.length;
      // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      final minMs = durations
          .map((d) => d.inMicroseconds / 1000)
          .reduce((a, b) => a < b ? a : b);
      // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      final maxMs = durations
          .map((d) => d.inMicroseconds / 1000)
          .reduce((a, b) => a > b ? a : b);

      print('üîπ $name:');
      print('   –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π: ${durations.length}');
      print('   –°—Ä–µ–¥–Ω–µ–µ: ${avgMs.toStringAsFixed(2)}ms');
      print(
        '   –ú–∏–Ω/–ú–∞–∫—Å: ${minMs.toStringAsFixed(2)}ms /'
        ' ${maxMs.toStringAsFixed(2)}ms',
      );
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  void clear() => _metrics.clear();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ —Å–µ—Ä–≤–µ—Ä—É
Future<String> simulateApiCall(String endpoint, {int delayMs = 200}) async {
  await Future.delayed(Duration(milliseconds: delayMs));
  if (endpoint == 'error') {
    throw Exception('API Error');
  }
  return 'Response from $endpoint';
}

void main() async {
  final profiler = SimpleProfiler();

  await profiler.profile('stasko_operation', () async {
    await profiler.profile('step_1', () async {
      return await simulateApiCall('/step1', delayMs: 60);
    });

    await profiler.profile('step_2', () async {
      return await simulateApiCall('/step2', delayMs: 40);
    });

    await profiler.profile('step_2', () async {
      return await simulateApiCall('/step2', delayMs: 100);
    });

    return 'Stasko operation completed';
  });

  profiler.printSummary();
}
