import 'dart:async';
import 'dart:io';

// –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
class TraceEvent {
  final String type; // –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
  final String operation; // –ò–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏
  final String? data; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  final int depth; // –ì–ª—É–±–∏–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
  final int timestampMs; // –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è

  TraceEvent({
    required this.type,
    required this.operation,
    this.data,
    required this.depth,
    required this.timestampMs,
  });
}

class SimpleTracer {
  // –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
  final List<TraceEvent> _events = [];
  // –¢–∞–π–º–µ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  final Stopwatch _stopwatch = Stopwatch();
  // –¢–µ–∫—É—â–∞—è –≥–ª—É–±–∏–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
  int _depth = 0;

  // –ú–µ—Ç–æ–¥ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
  Future<T> trace<T>(
    String operationName,
    Future<T> Function() operation,
  ) async {
    _stopwatch.start(); // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
    _addEvent('START', operationName);

    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–æ–Ω—É —Å –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–º —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      final result = await runZoned(
        operation,
        zoneSpecification: _getZoneSpecification(),
      );

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
      _addEvent('SUCCESS', operationName);
      return result;
    } catch (error) {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –æ—à–∏–±–∫–æ–π
      _addEvent('ERROR', operationName, data: error.toString());
      rethrow;
    } finally {
      _stopwatch.stop(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
      _printReport(operationName); // –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç –ø–æ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–µ
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–æ–Ω—ã
  ZoneSpecification _getZoneSpecification() {
    return ZoneSpecification(
      run: _traceRun,
      scheduleMicrotask: _traceMicrotask,
      createTimer: _traceTimer,
      print: _tracePrint,
    );
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
  // –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è, –∏–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  void _addEvent(String type, String operation, {String? data}) {
    _events.add(
      TraceEvent(
        type: type,
        operation: operation,
        data: data,
        depth: _depth,
        timestampMs: _stopwatch.elapsedMilliseconds,
      ),
    );
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏
  // –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  R _traceRun<R>(Zone self, ZoneDelegate parent, Zone zone, R Function() f) {
    _depth++;
    _addEvent('FUNCTION', f.runtimeType.toString());

    try {
      return parent.run(zone, f);
    } finally {
      _depth--;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –º–∏–∫—Ä–æ–∑–∞–¥–∞—á
  void _traceMicrotask(
    Zone self,
    ZoneDelegate parent,
    Zone zone,
    void Function() f,
  ) {
    _addEvent('MICROTASK', f.runtimeType.toString());
    parent.scheduleMicrotask(zone, f);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞
  Timer _traceTimer(
    Zone self,
    ZoneDelegate parent,
    Zone zone,
    Duration duration,
    void Function() f,
  ) {
    _addEvent('TIMER', '${duration.inMilliseconds}ms');
    return parent.createTimer(zone, duration, f);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ print
  void _tracePrint(Zone self, ZoneDelegate parent, Zone zone, String line) {
    _addEvent('PRINT', line);
    parent.print(zone, line);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—Ç—á–µ—Ç–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
  void _printReport(String operationName) {
    stdout.writeln('\nüîç –û—Ç—á–µ—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏: $operationName');
    stdout.writeln('=' * 50);
    stdout.writeln('–û–±—â–µ–µ –≤—Ä–µ–º—è: ${_stopwatch.elapsedMilliseconds}ms');
    stdout.writeln('–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: ${_events.length}');

    for (final event in _events) {
      final indent = '  ' * event.depth;
      final timeStr = '[${event.timestampMs.toString().padLeft(4)}ms]';
      final typeStr = event.type.padRight(9);
      final dataStr = event.data != null ? ' (${event.data})' : '';

      stdout.writeln('$timeStr $indent$typeStr ${event.operation}$dataStr');
    }
  }

  // –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–±—ã—Ç–∏—è–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
  List<TraceEvent> get events => List.unmodifiable(_events);

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
  void clear() => _events.clear();
}

// –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
Future<String> simulateComplexOperation() async {
  print('–ù–∞—á–∞–ª–æ —Å–ª–æ–∂–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏');

  await Future.delayed(Duration(milliseconds: 100));
  print('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è');

  scheduleMicrotask(() {
    print('–ú–∏–∫—Ä–æ–∑–∞–¥–∞—á–∞: –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞');
  });

  Timer(Duration(milliseconds: 50), () {
    print('–¢–∞–π–º–µ—Ä: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞');
  });

  await Future.delayed(Duration(milliseconds: 150));
  print('–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö');

  return '–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ';
}

// –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
Future<void> simulateNetworkCall() async {
  print('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞');
  await Future.delayed(Duration(milliseconds: 200));

  if (DateTime.now().millisecond % 3 == 0) {
    throw Exception('–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞');
  }

  print('–°–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω');
}

void main() async {
  final tracer = SimpleTracer();

  print('üëÄ –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–∂–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏:');

  await tracer.trace('complex_operation', () async {
    return await simulateComplexOperation();
  });

  await Future.delayed(Duration(milliseconds: 300));

  print('\nüëÄ –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:');

  try {
    await tracer.trace('network_call', () async {
      await simulateNetworkCall();
    });
  } catch (e) {
    // –û—à–∏–±–∫–∞ —É–∂–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤—â–∏–∫–æ–º
  }
}
